"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import base64
import os
import warnings
from datetime import timedelta
from pathlib import Path

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
CORS_ALLOW_ALL_ORIGINS = True

# CSRF Trusted Origins - Critical for cross-subdomain authentication
# Include wildcard to trust any subdomain of educationhub.io
CSRF_TRUSTED_ORIGINS = [
    "https://educationhub.io",
    "https://authz.educationhub.io",
    "https://*.educationhub.io",
    "http://localhost:3000",
    "http://localhost:8000",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:8000",
]

# Add Codespace support if in that environment
if "CODESPACE_NAME" in os.environ:
    CSRF_TRUSTED_ORIGINS.append(
        f'https://{os.getenv("CODESPACE_NAME")}-8000.{os.getenv("GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN")}'
    )

# URL Configuration
WEB_CLIENT_URL = os.getenv("WEB_CLIENT_URL", "https://educationhub.io")
BACKEND_URL = os.getenv("BACKEND_URL", "https://authz.educationhub.io")
FRONTEND_URL = os.getenv("FRONTEND_URL", "https://educationhub.io")
FRONTEND_URL_ORIGIN = os.getenv("FRONTEND_URL_ORIGIN_ONE", FRONTEND_URL)

# When set (e.g., ".educationhub.io"), backend will also set cookies scoped to
# the shared parent domain for cross-subdomain auth (educationhub.io â‡„ authz.educationhub.io)
CROSS_SUBDOMAIN_COOKIE_DOMAIN = os.getenv(
    "CROSS_SUBDOMAIN_COOKIE_DOMAIN") or None

# CORS Configuration
# For credentialed requests, don't allow-all; use explicit origins and wildcard regex for subdomains
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    FRONTEND_URL,
    BACKEND_URL,
    WEB_CLIENT_URL,
    "https://educationhub.io",
    "https://authz.educationhub.io",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:8000",
    "http://localhost:8000",
]
# Allow any subdomain like https://foo.educationhub.io
CORS_ALLOWED_ORIGIN_REGEXES = [r"^https:\/\/[a-z0-9-]+\.educationhub\.io$"]
ALLOWED_REDIRECT_HOSTS = [
    WEB_CLIENT_URL.replace("http://", "").replace("https://", ""),
    "127.0.0.1",
    "localhost",
    "educationhub.io",
    "authz.educationhub.io",
]

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load private key
PRIVATE_KEY = base64.b64decode(os.getenv("PRIVATE_KEY_B64", ""))
# with open(os.path.join(BASE_DIR, 'cert/private_key.pem'), 'rb') as f:
#     PRIVATE_KEY = f.read()
# Load public key
PUBLIC_KEY = base64.b64decode(os.getenv("PUBLIC_KEY_B64", ""))
# with open(os.path.join(BASE_DIR, 'cert/public_key.pem'), 'rb') as f:
#     PUBLIC_KEY = f.read()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/
# python -c 'import secrets; print(secrets.token_hex())'
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["SECRET_KEY"]

# Suppress deprecation warnings emitted by dj-rest-auth accessing
# deprecated allauth settings (USERNAME_REQUIRED/EMAIL_REQUIRED).
# We already configured the new-style settings (ACCOUNT_LOGIN_METHODS and
# ACCOUNT_SIGNUP_FIELDS), so these warnings are safe to ignore.
warnings.filterwarnings(
    "ignore",
    message=r".*app_settings\.USERNAME_REQUIRED is deprecated.*",
    category=UserWarning,
    module=r"dj_rest_auth\.registration\.serializers",
)
warnings.filterwarnings(
    "ignore",
    message=r".*app_settings\.EMAIL_REQUIRED is deprecated.*",
    category=UserWarning,
    module=r"dj_rest_auth\.registration\.serializers",
)

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    # Third-party
    "corsheaders",
    "rest_framework",
    "django_filters",
    "oauth2_provider",
    "rest_framework.authtoken",
    "compressor",
    "rosetta",  # http://127.0.0.1:8000/rosetta/pick/?rosetta
    "drf_yasg",
    "allauth",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    "allauth.account",
    "allauth.socialaccount",
    # AllAuth
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.facebook",
    "allauth.socialaccount.providers.telegram",
    # My apps
    "user",
    "rbac",
    "administrator",
    "ads",
    "schools",
    "organization",
    "search",
    "geo",
    "api",
    "web",
    "health_check",
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "oauth2_provider.backends.OAuth2Backend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    # request id + request/response logs
    "api.middlewares.RequestContextLoggingMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "user.middleware.session_security.SessionSecurityMiddleware",
    "oauth2_provider.middleware.OAuth2TokenMiddleware",  # OAuth2
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "user.middleware.profile.EnsureProfileMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # allauth
    "api.middlewares.LogRequestMiddleware",
    "api.middlewares.JWTSessionMiddleware",  # JWT-Session sync
    "api.middlewares.SocialAuthMiddleware",  # Social auth handling
]

# URL configuration
APPEND_SLASH = False  # Disable automatic slash appending to prevent POST data loss

# Session and Cookie settings
SESSION_COOKIE_NAME = "auth_server_sessionid"
SESSION_ENGINE = "django.contrib.sessions.backends.db"
SESSION_COOKIE_SECURE = False  # Set to True in production with HTTPS
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_SAVE_EVERY_REQUEST = True

# Cookie size settings for JWT tokens
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
# If configured, scope session/CSRF cookies to the parent domain for subdomain sharing
if not DEBUG:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    if CROSS_SUBDOMAIN_COOKIE_DOMAIN:
        SESSION_COOKIE_DOMAIN = CROSS_SUBDOMAIN_COOKIE_DOMAIN
        CSRF_COOKIE_DOMAIN = CROSS_SUBDOMAIN_COOKIE_DOMAIN
        # CSRF SameSite Lax allows top-level navigations (login redirects) to carry cookies
        CSRF_COOKIE_SAMESITE = 'Lax'
DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB

ROOT_URLCONF = "main.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.template.context_processors.i18n",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.request",
            ],
        },
    },
]

if DEBUG:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Authentication Server OAuth2 Settings
AUTH_USER_MODEL = "user.User"
# User Login 2Auth
# LOGIN_URL = '/admin/login/'
LOGIN_REDIRECT_URL = "profiles:profile"
LOGIN_URL = "/accounts/login/"


WSGI_APPLICATION = "main.wsgi.application"


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/
LANGUAGE_CODE = "en"
LANGUAGES = [
    ("en", "English"),
    ("km", "Khmer"),
    # ...
]
TIME_ZONE = "Asia/Phnom_Penh"
USE_I18N = True
USE_I18N_STANDARD = True
USE_L10N = True
USE_TZ = True
LOCALE_PATHS = [
    os.path.join(BASE_DIR, "locale"),
]

# Static files finders
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "compressor.finders.CompressorFinder",
]

# Base settings
STATIC_URL = "static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
# # Storage configuration using STORAGES setting
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
        "OPTIONS": {
            "location": MEDIA_ROOT,
        },
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        "OPTIONS": {
            "location": STATIC_ROOT,
        },
    },
}

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.MultiPartParser",
        "rest_framework.parsers.FormParser",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "api.authentication.UserAgentBoundJWTAuthentication",
        "oauth2_provider.contrib.rest_framework.OAuth2Authentication",
        # "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
        # "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 100,
    "DEFAULT_THROTTLE_CLASSES": (
        [
            # Disable rate limiting in debug mode for development
        ]
        if DEBUG
        else [
            "rest_framework.throttling.AnonRateThrottle",
            "rest_framework.throttling.UserRateThrottle",
        ]
    ),
    "DEFAULT_THROTTLE_RATES": {
        # Unauthenticated users (increased for development)
        "anon": "1000/hour",
        # Authenticated users (increased for development)
        "user": "10000/hour",
    },
}

SIMPLE_JWT = {
    "TOKEN_OBTAIN_SERIALIZER": "api.serializers.custom_jwt.CustomTokenObtainPairSerializer",
    "ALGORITHM": "RS256",
    "SIGNING_KEY": base64.b64decode(os.getenv("PRIVATE_KEY_B64", "")),
    "VERIFYING_KEY": base64.b64decode(os.getenv("PUBLIC_KEY_B64", "")),
    "JWT_PRIVATE_KEY": PRIVATE_KEY,
    "JWT_PUBLIC_KEY": PUBLIC_KEY,
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),  # Increased for testing
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    # "ACCESS_TOKEN_LIFETIME": timedelta(seconds=3600),
    # "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}

# Provider specific settings
TELEGRAM_BOT_ID = os.getenv("TELEGRAM_BOT_ID")
TELEGRAM_LOGIN_PUBLIC_KEY = os.getenv("TELEGRAM_LOGIN_PUBLIC_KEY")
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
            "openid",
            "https://www.googleapis.com/auth/calendar.readonly",
        ],
        "APP": {
            "client_id": os.getenv("GOOGLE_AUTH_CLIENT_ID"),
            "secret": os.getenv("GOOGLE_AUTH_SECRET"),
            # 'key': ''
        },
        "AUTH_PARAMS": {"access_type": "online", "prompt": "consent"},
    },
    "facebook": {
        "METHOD": "oauth2",  # Set to 'js_sdk' to use the Facebook connect SDK
        "SDK_URL": "//connect.facebook.net/{locale}/sdk.js",
        "SCOPE": ["email", "public_profile"],
        "AUTH_PARAMS": {"auth_type": "reauthenticate"},
        "INIT_PARAMS": {"cookie": True},
        "FIELDS": [
            "id",
            "first_name",
            "last_name",
            "middle_name",
            "name",
            "name_format",
            "picture",
            "short_name",
        ],
        "EXCHANGE_TOKEN": True,
        "LOCALE_FUNC": "path.to.callable",
        "VERIFIED_EMAIL": False,
        "VERSION": "v13.0",
        "GRAPH_API_URL": "https://graph.facebook.com/v13.0",
    },
    "telegram": {
        "APP": {
            "client_id": TELEGRAM_BOT_ID,
            # NOTE: For the secret, be sure to provide the complete bot token,
            # which typically includes the bot ID as a prefix.
            "secret": TELEGRAM_LOGIN_PUBLIC_KEY,
        },
        "AUTH_PARAMS": {"auth_date_validity": 100},
    },
}

# # Cirtificate Settings
# # Path to your private and public keys for JWT
# JWT_PRIVATE_KEY_PATH = os.getenv("PRIVATE_KEY_B64", "")
# JWT_PUBLIC_KEY_PATH = os.getenv("PUBLIC_KEY_B64", "")


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

APP_URL = (
    [os.environ["WEBSITE_HOSTNAME"]]
    if "WEBSITE_HOSTNAME" in os.environ
    else [os.getenv("APP_URL")]
)
OPEN_AI_API_SECRET = os.getenv("OPEN_AI_KEY")
IPINFO_TOKEN = os.getenv("IPINFO_TOKEN", "")

# Django Allauth Configuration (Updated for latest version)
SOCIALACCOUNT_LOGIN_ON_GET = True
SOCIALACCOUNT_STORE_TOKENS = True
SOCIALACCOUNT_AUTO_SIGNUP = True

# Allauth settings (latest format, no deprecation warnings)
# Use both email and username for login
ACCOUNT_LOGIN_METHODS = {'email', 'username'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*',
                         'password1*', 'password2*']  # All required fields
# Skip email verification for social accounts
ACCOUNT_EMAIL_VERIFICATION = 'none'

SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'

# dj-rest-auth configuration
REST_AUTH = {
    'USE_JWT': True,  # Enable SimpleJWT integration
    'SESSION_LOGIN': True,  # Keep Django session alongside JWT if needed
    'JWT_AUTH_COOKIE': 'access_token',
    'JWT_AUTH_REFRESH_COOKIE': 'refresh_token',
    'JWT_AUTH_HTTPONLY': True,
    'JWT_AUTH_SECURE': not DEBUG,  # Set to True in production
    'JWT_AUTH_SAMESITE': 'Lax',
    # Response/user details
    'USER_DETAILS_SERIALIZER': 'api.serializers.user_details.UserDetailsSerializer',
    'REGISTER_SERIALIZER': 'api.serializers.registration.CustomRegisterSerializer',
    # Leave JWT serializer defaults; token creation/claims are governed by SIMPLE_JWT
    # via SIMPLE_JWT["TOKEN_OBTAIN_SERIALIZER"] = api.serializers.custom_jwt.CustomTokenObtainPairSerializer
}

# Define custom adapter for social login redirects
SOCIALACCOUNT_ADAPTER = 'api.adapters.CustomSocialAccountAdapter'

# Structured logging config (console). In production, route to your aggregator.
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "%(asctime)s %(levelname)s %(name)s: %(message)s",
        },
        "auth": {
            "format": "%(asctime)s %(levelname)s %(name)s | msg=%(message)s",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "console_auth": {
            "class": "logging.StreamHandler",
            "formatter": "auth",
        },
    },
    "loggers": {
        # Our API/auth modules
        "api": {"handlers": ["console_auth"], "level": "INFO", "propagate": True},
        # Django
        "django": {"handlers": ["console"], "level": "WARNING", "propagate": True},
        # Requests to see CORS/CSRF warnings, etc.
        "django.security": {"handlers": ["console"], "level": "INFO", "propagate": True},
    },
}
