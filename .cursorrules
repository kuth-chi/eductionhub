# Django Project Configuration for Cursor

## Project Structure
This is a Django REST Framework backend with Next.js frontend project.

### Backend (Django)
- **Location**: `v0.0.2/` (Django backend)
- **Frontend**: `web/` (Next.js with TypeScript, Shadcn UI, Tailwind CSS)
- **Database**: SQLite (development), PostgreSQL (production)
- **API**: Django REST Framework with drf-yasg for Swagger docs

### Key Django Apps
- `schools/` - Main educational models and views
- `user/` - User management and authentication
- `organization/` - Organization management
- `api/` - REST API endpoints
- `ads/` - Advertisement system
- `search/` - Search functionality
- `rbac/` - Role-based access control

### Django Models Structure
- `schools/models/levels.py` - Educational levels, degrees, colleges, majors
- `schools/models/schoolsModel.py` - School, branch, scholarship models
- `schools/models/OnlineProfile.py` - Platform and profile models

### Frontend Structure
- `web/src/modules/schools/` - School-related components
- `web/src/components/ui/` - Shadcn UI components
- `web/src/app/` - Next.js App Router pages

## Coding Standards

### Django Backend
- Use Django 5.x patterns and best practices
- Follow PEP 8 for Python code
- Use Django REST Framework for APIs
- Implement proper model relationships and migrations
- Use Django admin for data management
- Follow Django naming conventions (snake_case)

### Frontend (Next.js)
- Use TypeScript for type safety
- Follow React functional component patterns
- Use Shadcn UI components consistently
- Implement proper error handling and loading states
- Use Tailwind CSS for styling
- Follow Next.js 14+ App Router patterns

### Database Design
- Use UUID fields for unique identifiers
- Implement proper foreign key relationships
- Use ManyToManyField for complex relationships
- Include metadata fields (created_at, updated_at, is_active, is_deleted)
- Use slug fields for SEO-friendly URLs

### API Design
- Use Django REST Framework serializers
- Implement proper authentication and permissions
- Use drf-yasg for API documentation
- Follow RESTful conventions
- Implement proper error handling

## Common Patterns

### Django Models
```python
class ExampleModel(models.Model):
    uuid = models.UUIDField(unique=True, default=uuid.uuid4)
    name = models.CharField(max_length=255)
    slug = models.SlugField(blank=True, unique=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    is_active = models.BooleanField(default=True)
    is_deleted = models.BooleanField(default=False)
```

### Django Admin
```python
@admin.register(ExampleModel)
class ExampleModelAdmin(admin.ModelAdmin):
    list_display = ('name', 'created_at', 'is_active')
    search_fields = ('name',)
    list_filter = ('is_active', 'created_at')
    readonly_fields = ('uuid', 'created_at', 'updated_at')
```

### Frontend Components
```typescript
interface ComponentProps {
  data: any[];
  onSave: (data: any) => void;
  isLoading?: boolean;
}

export const Component: React.FC<ComponentProps> = ({
  data,
  onSave,
  isLoading = false
}) => {
  // Component implementation
};
```

## File Organization
- Keep models in separate files by domain
- Use proper imports and avoid circular dependencies
- Organize frontend components by feature/module
- Use consistent file naming conventions

## Database Migrations
- Always create migrations for model changes
- Test migrations on development data
- Use proper field types and constraints
- Handle data migrations carefully

## API Endpoints
- Use consistent URL patterns
- Implement proper serialization
- Handle authentication and permissions
- Provide comprehensive error responses

## Testing
- Write tests for Django models and views
- Test API endpoints thoroughly
- Use proper test data and fixtures
- Implement frontend component testing

## Deployment
- Use environment variables for configuration
- Implement proper logging
- Use production-ready database
- Configure static file serving

## Common Issues to Avoid
- Don't use `any` types in TypeScript when possible
- Avoid hardcoding values in Django settings
- Don't forget to handle migrations properly
- Avoid circular imports
- Use proper error boundaries in React
- Don't forget to validate form data

## Development Workflow
1. Make model changes in Django
2. Create and test migrations
3. Update admin interface
4. Create/update API endpoints
5. Update frontend components
6. Test integration
7. Deploy changes

Remember: This is a full-stack application with Django backend and Next.js frontend. Always consider both sides when making changes. 